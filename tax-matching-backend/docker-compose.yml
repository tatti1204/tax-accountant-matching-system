version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: tax-matching-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-tax_matching_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-tax_matching_pass}
      POSTGRES_DB: ${DB_NAME:-tax_matching_db}
      TZ: Asia/Tokyo
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-tax_matching_user} -d ${DB_NAME:-tax_matching_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: tax-matching-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_pass}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tax-matching-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${DB_USER:-tax_matching_user}:${DB_PASSWORD:-tax_matching_pass}@postgres:5432/${DB_NAME:-tax_matching_db}?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3000
    volumes:
      - ./src:/app/src
      - ./prisma:/app/prisma
      - ./tsconfig.json:/app/tsconfig.json
      - ./nodemon.json:/app/nodemon.json
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: tax-matching-network